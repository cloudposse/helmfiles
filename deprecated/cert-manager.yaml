repositories:
# Add the Jetstack Helm repository
- name: jetstack
  url: "https://charts.jetstack.io"
  # Kubernetes incubator repo of helm charts
- name: "kubernetes-incubator"
  url: "https://charts.helm.sh/incubator"

releases:

###############################################################################
## CERT-MANAGER - Automatic Let's Encrypt for Ingress  ########################
##   Also provides local CA for issuing locally valid TLS certificates  #######
##   Replaces kube-lego                                                 #######
###############################################################################

#
# References:
# - https://github.com/jetstack/cert-manager/blob/v1.0.4/deploy/charts/cert-manager/values.yaml
# Instructions for installing and testing correct install are at
# - https://cert-manager.io/docs/installation/kubernetes/#installing-with-helm
#
- name: "cert-manager"
  namespace: "cert-manager"
  labels:
    chart: "cert-manager"
    repo: "stable"
    component: "kiam"
    namespace: "cert-manager"
    vendor: "jetstack"
    default: "false"
  chart: "jetstack/cert-manager"
  version: "{{ env "CERT_MANAGER_CHART_VERSION" | default "v1.0.4" }}"
  wait: true
  atomic: true
  cleanupOnFail: true
  createNamespace: true
  installed: {{ env "CERT_MANAGER_INSTALLED" | default "true" }}
  hooks:
  - events: ["postsync"]
    # Give cert-manager time to initialize itself
    showlogs: true
    command: "/bin/sleep"
    args: ["15"]
  values:
    - fullnameOverride: cert-manager
      installCRDs: true
      rbac:
        ### Optional: RBAC_ENABLED;
        create: {{ env "RBAC_ENABLED" | default "false" }}
      ingressShim:
        ### Optional: CERT_MANAGER_INGRESS_SHIM_DEFAULT_ISSUER_NAME;
        defaultIssuerName: '{{ env "CERT_MANAGER_INGRESS_SHIM_DEFAULT_ISSUER_NAME" | default "letsencrypt-staging" }}'
        ### Optional: CERT_MANAGER_INGRESS_SHIM_DEFAULT_ISSUER_KIND;
        defaultIssuerKind: '{{ env "CERT_MANAGER_INGRESS_SHIM_DEFAULT_ISSUER_KIND" | default "ClusterIssuer" }}'
        # defaultIssuerName: ""
        # defaultIssuerKind: ""
        # defaultACMEChallengeType: ""
        # defaultACMEDNS01ChallengeProvider: ""
      {{- if env "CERT_MANAGER_IAM_ROLE" | default "" }}
      podAnnotations:
        ### Required: EXTERNAL_DNS_IAM_ROLE; e.g. cp-staging-external-dns
        iam.amazonaws.com/role: '{{ env "CERT_MANAGER_IAM_ROLE" }}'
      {{- end }}
      serviceAccount:
        ### Optional: RBAC_ENABLED;
        create: {{ env "RBAC_ENABLED" | default "false" }}
        ### Optional: CERT_MANAGER_SERVICE_ACCOUNT_NAME;
        name: '{{ env "CERT_MANAGER_SERVICE_ACCOUNT_NAME" | default "" }}'
      prometheus:
        enabled: {{ env "CERT_MANAGER_METRICS_ENABLED" | default (env "METRICS_ENABLED") | default "false" }}
        servicemonitor:
          enabled: {{ env "CERT_MANAGER_METRICS_ENABLED" | default (env "METRICS_ENABLED") | default "false" }}
          prometheusInstance: default
          targetPort: 9402
          path: /metrics
          interval: 60s
          scrapeTimeout: 30s
      webhook:
        enabled: true
      cainjector:
        enabled: true
      resources:
        limits:
          cpu: "200m"
          memory: "256Mi"
        requests:
          cpu: "50m"
          memory: "128Mi"
- name: 'cert-manager-issuers'
  needs: ['cert-manager/cert-manager']
  chart: "kubernetes-incubator/raw"
  namespace: "cert-manager"
  labels:
    component: "cert-manager"
    namespace: "cert-manager"
    default: "true"
  version: "0.2.3"
  wait: true
  atomic: true
  cleanupOnFail: true
  installed: {{ env "CERT_MANAGER_INSTALLED" | default "true" }}
  disableValidation: true
  values:
  - resources:
    - apiVersion: cert-manager.io/v1
      kind: ClusterIssuer
      metadata:
        name: letsencrypt-staging
      spec:
        acme:
          # The ACME server URL
          server: https://acme-staging-v02.api.letsencrypt.org/directory
          # Email address used for ACME registration
          email: {{ coalesce (env "CERT_MANAGER_EMAIL") (env "KUBE_LEGO_EMAIL") "user@example.com" }}
          # Name of a secret used to store the ACME account private key
          privateKeySecretRef:
            name: letsencrypt-staging
          solvers:
            {{- if env "CERT_MANAGER_HTTP_SOLVER_ENABLED" | default "" }}
            # Enable the HTTP-01 challenge provider
            - http01:
                ingress:
                  class: nginx
            {{- end }}
            {{- if env "CERT_MANAGER_IAM_ROLE" | default "" }}
            # Enable the DNS-01 challenge provider
            - dns01:
                route53:
                  region: {{ env "AWS_REGION" | default (env "AWS_DEFAULT_REGION") }}
            {{- end }}
    - apiVersion: cert-manager.io/v1
      kind: ClusterIssuer
      metadata:
        name: letsencrypt-prod
      spec:
        acme:
          # The ACME server URL
          server: https://acme-v02.api.letsencrypt.org/directory
          # Email address used for ACME registration
          email: {{ coalesce (env "CERT_MANAGER_EMAIL") (env "KUBE_LEGO_EMAIL") "user@example.com" }}
          # Name of a secret used to store the ACME account private key
          privateKeySecretRef:
            name: letsencrypt-prod
          solvers:
            {{- if env "CERT_MANAGER_HTTP_SOLVER_ENABLED" | default "" }}
            # Enable the HTTP-01 challenge provider
            - http01:
                ingress:
                  class: nginx
            {{- end }}
            {{- if env "CERT_MANAGER_IAM_ROLE" | default "" }}
            # Enable the DNS-01 challenge provider
            - dns01:
                route53:
                  region: {{ env "AWS_REGION" | default (env "AWS_DEFAULT_REGION") }}
            {{- end }}

