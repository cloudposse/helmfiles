repositories:
# Codefresh on-prem repository
- name: "codefresh"
  url: 'http://charts.codefresh.io/{{ env "CHANNEL" | default "dev" }}'
# Incubator repo of official helm charts
- name: "incubator"
  url: "https://kubernetes-charts-incubator.storage.googleapis.com/"

releases:

#######################################################################################
## Codefresh On-Prem                                                                 ##
#######################################################################################

#
# References:
#   - https://github.com/codefresh-io/onprem
#
- name: "cf"
  namespace: "codefresh"
  labels:
    chart: "codefresh"
    component: "codefresh"
    namespace: "codefresh"
    vendor: "codefresh"
    default: "false"
  chart: "codefresh/codefresh"
  version: "0.7.9"
  wait: true
  values:
  - global:
      ### Instantiate databases with seed data. Usually used in dynamic and on-prem environments.
      seedJobs: {{ env "CODEFRESH_SEED_JOBS_ENABLED" | default "false" }}
      certsJobs: {{ env "CODEFRESH_SEED_JOBS_ENABLED" | default "false" }}
      appProtocol: https
      ### Codefresh App domain name
      appUrl: {{ env "CODEFRESH_HOST" }}
{{- if eq (env "CODEFRESH_SELF_HOSTED_POSTGRESQL_ENABLED" | default "true") "false" }}
      postgresDatabase: {{ env "AURORA_POSTGRES_DATABASE_NAME" }}
      postgresPassword: {{ env "AURORA_POSTGRES_MASTER_PASSWORD" }}
      postgresHostname: {{ env "AURORA_POSTGRES_MASTER_HOSTNAME" }}
      postgresUser: {{ env "AURORA_POSTGRES_MASTER_USERNAME" }}
{{- end }}
{{- if eq (env "CODEFRESH_SELF_HOSTED_REDIS_ENABLED" | default "true") "false" }}
      redisUrl: {{ env "REDIS_HOST" }}
      redisPassword: {{ env "REDIS_AUTH_TOKEN" }}
{{- end }}

    ## Custom annotations for Codefresh ingress resource that override defaults
    annotations:
      kubernetes.io/ingress.class: {{ env "CODEFRESH_INGRESS_CLASS" | default "nginx" }}
      external-dns: enabled
      external-dns.alpha.kubernetes.io/hostname: {{ env "CODEFRESH_HOST" }}
{{ if eq (env "CODEFRESH_INGRESS_CLASS" | default "nginx") "nginx" }}
      kubernetes.io/tls-acme: "true"
      external-dns.alpha.kubernetes.io/target: '{{ env "NGINX_INGRESS_HOSTNAME" }}'
      nginx.ingress.kubernetes.io/ssl-redirect: 'true'
      nginx.org/redirect-to-https: 'true'
{{ else if eq (env "CODEFRESH_INGRESS_CLASS" | default "nginx") "alb" }}
      alb.ingress.kubernetes.io/scheme: internet-facing
      alb.ingress.kubernetes.io/listen-ports: '[{"HTTP":80},{"HTTPS":443}]'
      alb.ingress.kubernetes.io/certificate-arn: {{ env "CODEFRESH_INGRESS_ACM_ARN" }}
{{ end }}

    ### Firebase secret
    firebaseSecret: {{ env "CODEFRESH_FIREBASE_SECRET" }}

    ### Uncomment if kubernetes cluster is RBAC enabled
    rbacEnable: {{ env "RBAC_ENABLED" | default "false" }}

    ingress:
      enabled: false
      ### Codefresh App domain name
      domain: {{ env "CODEFRESH_HOST" }}
      ### Set RBAC_ENABLED to true if kubernetes cluster is RBAC enabled
      rbacEnable: {{ env "RBAC_ENABLED" | default "false" }}

    ### For github provider (the apiHost and loginHost are different)
    cfapi:
      rbacEnable: {{ env "RBAC_ENABLED" | default "false" }}
      redeploy: true
      github:
        apiHost: api.github.com
        loginHost: github.com
        protocol: https
{{- if eq (env "CODEFRESH_INGRESS_CLASS" | default "nginx") "alb" }}
      serviceType: NodePort
{{- end }}

    consul:
      Storage: '{{ env "CODEFRESH_CONSUL_STORAGE_SIZE" | default "1Gi" }}'
      StorageClass: '{{ env "CODEFRESH_CONSUL_STORAGE_CLASS" | default "default" }}'

    postgresql:
      enabled: {{ env "CODEFRESH_SELF_HOSTED_POSTGRESQL_ENABLED" | default "true" }}
      persistence:
        enabled: true

    mongodb:
      ## Provision new volume claim
      persistence:
        enabled: true
        ## If defined, volume.beta.kubernetes.io/storage-class: <storageClass>
        ## Default: volume.alpha.kubernetes.io/storage-class: default
        ##
        accessMode: ReadWriteOnce
        size: 8Gi

    redis:
      enabled: {{ env "CODEFRESH_SELF_HOSTED_REDIS_ENABLED" | default "true" }}
      persistence:
        enabled: true

    rabbitmq:
      persistence:
        enabled: true

    registry:
      registryConfig:
      # Insert custom registry configuration (https://docs.docker.com/registry/configuration/)
#        version: 0.1
#        log:
#          level: debug
#        fields:
#          service: registry
#        storage:
#          cache:
#            blobdescriptor: inmemory
#          s3:
#            region: YOUR_REGION
#            bucket: YOUR_BUCKET_NAME
#            accesskey: AWS_ACCESS_KEY
#            secretkey: AWS_SECRET_KEY
#        http:
#          addr: :5000
#        headers:
#          X-Content-Type-Options: [nosniff]
#        health:
#        storagedriver:
#          enabled: true

    hermes:
      nodeSelector: {}
      #    services: rabbitmq-registry
      redis:
        ## Set hermes store password. It is mandatory
        redisPassword: verysecurepassword
        nodeSelector: {}
        #      services: rabbitmq-registry
        persistence:
          enabled: true

    cronus:
      store:
        size: '{{ env "CODEFRESH_CRONUS_STORAGE_SIZE" | default "1Gi" }}'
      storageClass: '{{ env "CODEFRESH_CRONUS_STORAGE_CLASS" | default "default"}}'

    builder:
      ## Use existing volume claim name
      #pvcName: cf-builder
      ## Set time to run docker cleaner
      dockerCleanerCron: 0 0 * * *
      ## Override builder PV initial size
      varLibDockerVolume:
        storageSize: 100Gi

    runner:
      ## Set time to run docker cleaner
      dockerCleanerCron: 0 0 * * *
      ## Override runner PV initial size
      varLibDockerVolume:
        storageSize: 100Gi

    backups:
      #enabled: true
      awsAccessKey:
      awsSecretAccessKey:
      s3Url: s3://<some-bucket>

    dockerconfigjson:
      auths:
        gcr.io:
          auth: {{ cat "_json_key:" ( env "CODEFRESH_SA") | b64enc }}

    cfui:
      imageTag: 2.8.107
{{- if eq (env "CODEFRESH_INGRESS_CLASS" | default "nginx") "alb" }}
      serviceType: NodePort
{{- end }}
      dockerconfigjson:
        auths:
          gcr.io:
            auth: {{ cat "_json_key:" ( env "CODEFRESH_SA") | b64enc }}

    runtime-environment-manager:
      dockerconfigjson:
        auths:
          gcr.io:
            auth: {{ cat "_json_key:" ( env "CODEFRESH_SA") | b64enc }}

    onboarding-status:
      dockerconfigjson:
        auths:
          gcr.io:
            auth: {{ cat "_json_key:" ( env "CODEFRESH_SA") | b64enc }}

    cfanalytic:
      dockerconfigjson:
        auths:
          gcr.io:
            auth: {{ cat "_json_key:" ( env "CODEFRESH_SA") | b64enc }}

- name: "cf-ext"
  namespace: "codefresh"
  labels:
    chart: "raw"
    component: "codefresh"
    namespace: "codefresh"
    vendor: "kubernetes-incubator"
    default: "false"
  chart: "incubator/raw"
  version: "0.1.0"
  wait: true
  values:
  - resources:
    - apiVersion: extensions/v1beta1
      kind: Ingress
      metadata:
        namespace: codefresh
        name: cf-extended
      annotations:
        kubernetes.io/ingress.class: nginx
        nginx.ingress.kubernetes.io/configuration-snippet: |
          more_set_headers "X-Request-ID: $request_id";
          proxy_set_header X-Request-ID $request_id;
        nginx.ingress.kubernetes.io/service-upstream: "true"
        nginx.ingress.kubernetes.io/ssl-redirect: "true"
        nginx.org/redirect-to-https: "true"
      spec:
        rules:
        - host: {{ env "CODEFRESH_HOST" }}
          http:
            paths:
            - path: /
              backend:
              serviceName: cf-cfui
              servicePort: 80
            - path: /api/
              backend:
                serviceName: cf-cfapi
                servicePort: 80
            - path: /nomios/
              backend:
                serviceName: cf-nomios
                servicePort: 80
        tls:
        - hosts:
          - {{ env "CODEFRESH_HOST" }}
          secretName: cf-codefresh-star-selfsigned
