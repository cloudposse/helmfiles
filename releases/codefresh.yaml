repositories:
# Codefresh on-prem repository
- name: "codefresh"
  url: 'http://charts.codefresh.io/{{ env "CHANNEL" | default "prod" }}'

releases:

#######################################################################################
## Codefresh On-Prem                                                                 ##
#######################################################################################

#
# References:
#   - https://github.com/codefresh-io/onprem
#
- name: "cf"
  namespace: "codefresh"
  labels:
    chart: "codefresh"
    component: "codefresh"
    namespace: "codefresh"
    vendor: "codefresh"
    default: "false"
  chart: "codefresh/codefresh"
  version: "1.0.70"
  wait: true
  force: true
  installed: {{ env "CODEFRESH_INSTALLED" | default "true" }}
  values:
  - global:
      ### Instantiate databases with seed data. Usually used in dynamic and on-prem environments.
      seedJobs: {{ env "CODEFRESH_SEED_JOBS_ENABLED" | default "false" }}
      certsJobs: {{ env "CODEFRESH_CERT_JOBS_ENABLED" | default "false" }}
      cfcrDomain: {{ env "CODEFRESH_REGISTRY_DOMAIN" | default "cf-registry" }}
      gceProject: {{ env "CODEFRESH_GCE_PROJECT" | default "default" }}
      appProtocol: https

      registryPort: {{ env "CODEFRESH_REGISTRY_PORT" | default "5000" }}
      exposeRegistry: {{ env "CODEFRESH_REGISTRY_EXPOSE" | default "false" }}

      dindCPULimits: {{ env "CODEFRESH_DIND_LIMIT_CPU" | default "1000m" }}
      dindMemoryLimits: {{ env "CODEFRESH_DIND_LIMIT_MEMORY" | default "4096Mi" }}
      dindCPU: {{ env "CODEFRESH_DIND_REQUEST_CPU" | default "100m" }}
      dindMemory: {{ env "CODEFRESH_DIND_REQUEST_MEMORY" | default "256Mi" }}

      # storageClass: {{ env "CODEFRESH_STORAGE_CLASS" | default "default" }}
      ### Codefresh App domain name
      appUrl: {{ env "CODEFRESH_HOST" }}
{{- if eq (env "CODEFRESH_USE_EXTERNAL_MONGODB" | default "false") "true" }}
      mongoURI: {{ env "MONGODB_URI" }}
{{- end }}

{{- if eq (env "CODEFRESH_SELF_HOSTED_POSTGRESQL_ENABLED" | default "true") "false" }}
      postgresDatabase: {{ env "AURORA_POSTGRES_DATABASE_NAME" }}
      postgresPassword: {{ env "AURORA_POSTGRES_MASTER_PASSWORD" }}
      postgresHostname: {{ env "AURORA_POSTGRES_MASTER_HOSTNAME" }}
      postgresUser: {{ env "AURORA_POSTGRES_MASTER_USERNAME" }}
{{- end }}
{{- if eq (env "CODEFRESH_SELF_HOSTED_REDIS_ENABLED" | default "true") "false" }}
      redisUrl: {{ env "REDIS_HOST" }}
      redisPassword: {{ env "REDIS_AUTH_TOKEN" }}
{{- end }}

{{ if eq (env "CODEFRESH_INGRESS_CLASS" | default "nginx") "nginx" }}
    tls:
      selfSigned: true
{{ end }}

    ## Custom annotations for Codefresh ingress resource that override defaults
    annotations:
{{ if eq (env "CODEFRESH_USE_EXTERNAL_INGRESS" | default "false") "true" }}
      kubernetes.io/ingress.class: none
{{ else }}
      kubernetes.io/ingress.class: {{ env "CODEFRESH_INGRESS_CLASS" | default "nginx" }}
      external-dns: enabled
      external-dns.alpha.kubernetes.io/hostname: {{ env "CODEFRESH_HOST" }}
{{ end }}

{{ if eq (env "CODEFRESH_INGRESS_CLASS" | default "nginx") "nginx" }}
      kubernetes.io/tls-acme: "true"
      external-dns.alpha.kubernetes.io/target: '{{ env "NGINX_INGRESS_HOSTNAME" }}'
      nginx.ingress.kubernetes.io/ssl-redirect: 'true'
      nginx.org/redirect-to-https: 'true'
{{ else if eq (env "CODEFRESH_INGRESS_CLASS" | default "nginx") "alb" }}
      alb.ingress.kubernetes.io/scheme: internet-facing
      alb.ingress.kubernetes.io/listen-ports: '[{"HTTP":80},{"HTTPS":443}]'
      alb.ingress.kubernetes.io/certificate-arn: {{ env "CODEFRESH_INGRESS_ACM_ARN" }}
{{ end }}

    ### Firebase secret
    firebaseSecret: {{ env "CODEFRESH_FIREBASE_SECRET" }}

    ### Uncomment if kubernetes cluster is RBAC enabled
    rbacEnable: {{ env "RBAC_ENABLED" | default "false" }}

    ingress:
      enabled: false
      ### Codefresh App domain name
      domain: {{ env "CODEFRESH_HOST" }}
      ### Set RBAC_ENABLED to true if kubernetes cluster is RBAC enabled
      rbacEnable: {{ env "RBAC_ENABLED" | default "false" }}

    ### For github provider (the apiHost and loginHost are different)
    cfapi:
      replicaCount: {{ env "CODEFRESH_API_REPLICA_COUNT" | default "1" }}
      rbacEnable: {{ env "RBAC_ENABLED" | default "false" }}
      redeploy: true
      # 
      # imageTag: saas-2127
      env:
        EVENT_REPORTING_URL: 'http://cf-cfapi:80/api/workflow/'
        WEBHOOK_BASE_URL: https://hooks.{{ env "CODEFRESH_HOST" }}
      github:
        apiHost: api.github.com
        loginHost: github.com
        protocol: https
{{- if eq (env "CODEFRESH_INGRESS_CLASS" | default "nginx") "alb" }}
      serviceType: NodePort
{{- end }}

{{- if eq (env "CODEFRESH_INGRESS_CLASS" | default "nginx") "alb" }}
    nomios:
      service:
        type: NodePort
{{- end }}

    context-manager:
      replicaCount: {{ env "CODEFRESH_CONTEXT_MANAGER_REPLICA_COUNT" | default "1" }}

    pipeline-manager:
      environment:
        replicaCount: {{ env "CODEFRESH_PIPELINE_MANAGER_REPLICA_COUNT" | default "1" }}

    consul:
      storage: '{{ env "CODEFRESH_CONSUL_STORAGE_SIZE" | default "1Gi" }}'
      storageClass: '{{ env "CODEFRESH_CONSUL_STORAGE_CLASS" | default "default" }}'

    postgresql:
      enabled: {{ env "CODEFRESH_SELF_HOSTED_POSTGRESQL_ENABLED" | default "true" }}
      storageClass: '{{ env "CODEFRESH_SELF_HOSTED_POSTGRESQL_STORAGE_CLASS" | default "default" }}'
      storageSize:  '{{ env "CODEFRESH_SELF_HOSTED_POSTGRESQL_STORAGE_SIZE" | default "8Gi" }}'
      # presistence.enabled does not work anymore. Leave for back compatibility
      persistence:
        enabled: {{ env "CODEFRESH_SELF_HOSTED_POSTGRESQL_ENABLED" | default "true" }}

    mongo:
{{- if eq (env "CODEFRESH_USE_EXTERNAL_MONGODB" | default "false") "true" }}
      enabled: false
{{- else }}
      enabled: true
{{- end }}

    mongodb:
      ## Provision new volume claim
      persistence:
        enabled: true
        ## If defined, volume.beta.kubernetes.io/storage-class: <storageClass>
        ## Default: volume.alpha.kubernetes.io/storage-class: default
        ##
        accessMode: ReadWriteOnce
        size: '{{ env "CODEFRESH_SELF_HOSTED_MONGODB_STORAGE_SIZE" | default "8Gi" }}'
      mongodbDatabase: codefresh
      mongodbPassword: mTiXcU2wafr9
      mongodbUsername: cfuser

    redis:
      enabled: {{ env "CODEFRESH_SELF_HOSTED_REDIS_ENABLED" | default "true" }}
      storageClass: '{{ env "CODEFRESH_SELF_HOSTED_REDIS_STORAGE_CLASS" | default "default" }}'
      storageSize:  '{{ env "CODEFRESH_SELF_HOSTED_REDIS_STORAGE_SIZE" | default "8Gi" }}'
      # presistence.enabled does not work anymore. Leave for back compatibility
      persistence:
        enabled: {{ env "CODEFRESH_SELF_HOSTED_REDIS_ENABLED" | default "true" }}

    rabbitmq:
      persistence:
        enabled: true

    registry:
      pvcName: "no-pvc-use-s3"
      replicaCount: {{ env "CODEFRESH_REGISTRY_REPLICA_COUNT" | default "1" }}
      registryConfig:
        version: 0.1
        log:
          fields:
            service: 'registry'
        storage:
          cache:
            blobdescriptor: 'inmemory'
          s3:
            region: {{ env "CODEFRESH_SELF_HOSTER_REGISTRY_S3_REGION" | default "us-west-2" }}
            bucket: {{ env "CODEFRESH_SELF_HOSTER_REGISTRY_S3_BUCKET_NAME" }}
            accesskey: {{ env "AWS_ACCESS_KEY_ID" }}
            secretkey: {{ env "AWS_SECRET_ACCESS_KEY" }}
            rootdirectory: /
        http:
          addr: ':5000'
          secret: {{ env "CODEFRESH_REGISTRY_SIGN_SECRET" | default uuidv4  }}
        health:
          storagedriver:
            enabled: true
            interval: 10s
            threshold: 3

    hermes:
      nodeSelector: {}
      #    services: rabbitmq-registry
      redis:
        ## Set hermes store password. It is mandatory
        redisPassword: '{{ env "CODEFRESH_HERMES_REDIS_PASSWORD" | default "verysecurepassword" }}'
        nodeSelector: {}
        #      services: rabbitmq-registry
        persistence:
          enabled: true

    cronus:
      store:
        size: '{{ env "CODEFRESH_CRONUS_STORAGE_SIZE" | default "1Gi" }}'
      storageClass: '{{ env "CODEFRESH_CRONUS_STORAGE_CLASS" | default "default"}}'

    builder:
      replicaCount: {{ env "CODEFRESH_BUILDER_REPLICA_COUNT" | default "1" }}
      ## Use existing volume claim name
      #pvcName: cf-builder
      ## Set time to run docker cleaner
      dockerCleanerCron: 0 0 * * *
      ## Override builder PV initial size
      varLibDockerVolume:
        storageSize: '{{ env "CODEFRESH_BUILDER_STORAGE_SIZE" | default "100Gi" }}'

    runner:
      replicaCount: {{ env "CODEFRESH_RUNNER_REPLICA_COUNT" | default "1" }}
      ## Set time to run docker cleaner
      dockerCleanerCron: 0 0 * * *
      ## Override runner PV initial size
      varLibDockerVolume:
        storageSize: '{{ env "CODEFRESH_RUNNER_STORAGE_SIZE" | default "100Gi" }}'

    dockerconfigjson:
      auths:
        gcr.io:
          auth: {{ cat "_json_key:" ( env "CODEFRESH_SA") | b64enc }}

    cfui:
      replicaCount: {{ env "CODEFRESH_UI_REPLICA_COUNT" | default "1" }}
{{- if eq (env "CODEFRESH_INGRESS_CLASS" | default "nginx") "alb" }}
      serviceType: NodePort
{{- end }}
      dockerconfigjson:
        auths:
          gcr.io:
            auth: {{ cat "_json_key:" ( env "CODEFRESH_SA") | b64enc }}

    runtime-environment-manager:
      dockerconfigjson:
        auths:
          gcr.io:
            auth: {{ cat "_json_key:" ( env "CODEFRESH_SA") | b64enc }}

    onboarding-status:
      dockerconfigjson:
        auths:
          gcr.io:
            auth: {{ cat "_json_key:" ( env "CODEFRESH_SA") | b64enc }}

    cfanalytic:
      dockerconfigjson:
        auths:
          gcr.io:
            auth: {{ cat "_json_key:" ( env "CODEFRESH_SA") | b64enc }}
            
    cf-broadcaster:
      ## Enable cf-broadcaster in future versions - when it would be required
      enabled: false
      dockerconfigjson:
        auths:
          gcr.io:
            auth: {{ cat "_json_key:" ( env "CODEFRESH_SA") | b64enc }}            
